#!/usr/bin/python3

from argparse import ArgumentParser
from math import cos, isclose, pi, sin
from os.path import exists

import numpy as np

np.set_printoptions(suppress=True)

DEFAULT_FILE = "rev_surf_in0.txt"
DEFAULT_U = 12
DEFAULT_T = 22


# Parses and returns the filename, number of segments, and radius of the spheres
def parse_args():
    parser = ArgumentParser(description="Surface of Revolution")
    parser.add_argument("-f", type=str, help="3D control points file")
    parser.add_argument("-u", type=int, help="Number of point samples of u")
    parser.add_argument("-t", type=int, help="Theta value")
    parser.add_argument("-F", action="store_true", help="Toggle flat-shaded")
    parser.add_argument("-S", action="store_true", help="Toggle smooth-shaded")
    parser.add_argument("-C", action="store_true", help="Toggle caps")

    args = parser.parse_args()
    filename = args.f if args.f else DEFAULT_FILE
    u = args.u if args.u else DEFAULT_U
    t = args.t if args.t else DEFAULT_T
    isSmooth = args.S
    caps = args.C

    return filename, u, t, isSmooth, caps


# Parses each control point and returns a matrix
def parse_points(filename):
    cpts_file = open(filename)
    P = []

    for line in cpts_file.readlines():
        line = line.strip()
        P.append(list(map(float, line.split(" "))))

    return np.asarray(P)


# Returns a Catmull-Rom Spline from the given control points
def compute_catmull_rom(P, num_u):
    # Split into tangents and points
    T, P = np.vsplit(P, [2])

    # Compute interior tangents and add them to the current tangent matrix
    T2 = compute_interior_tangents(P)
    if len(T2) > 0:
        T2 = np.insert(T2, 0, T[0], axis=0)
        T2 = np.insert(T2, len(T2), T[-1], axis=0)
        T = T2

    # Apply tension
    T = apply_tension(T, 0)

    # Compute Bezier control points by each two input points
    Pctl = compute_control_points(P, T)

    # Computes the bezier curve for each set of control points
    CR = []
    CR_prime = []
    for p in Pctl:
        cr, prime = bezier(p, num_u)
        CR.append(cr)
        CR_prime.append(prime)

    # Reshapes the curve matrix from 3D to 2D
    CR = np.asarray(CR)
    CR = CR.reshape((CR.shape[0] * CR.shape[1], CR.shape[2]))
    CR_prime = np.asarray(CR_prime)
    CR_prime = CR_prime.reshape(
        (CR_prime.shape[0] * CR_prime.shape[1], CR_prime.shape[2]))

    return np.round(CR, 6), np.round(CR_prime, 6)


# Computes the tangents for the interior input points
def compute_interior_tangents(P):
    T = []

    for k in range(1, len(P) - 1):
        t = (P[k+1] - P[k-1]) * 0.5
        T.append(t)

    return np.asarray(T)


# Computes the Bezier control points given the initial points and tangents
def compute_control_points(P, T):
    Pctl = []

    for k in range(len(P) - 1):
        p1 = P[k] + (1 / 3 * T[k])
        p2 = P[k+1] - (1 / 3 * T[k+1])
        Pctl.append([P[k], p1, p2, P[k+1]])

    return np.asarray(Pctl)


# Applies tension to a set of tangents
def apply_tension(T, tension):
    T2 = []
    for t in T:
        T2.append(t * (1 - tension))
    return np.asarray(T2)


# Evaluates the Bezier curve formula and returns a collection of points on the curve
def bezier(P, n):
    du = 1 / n
    u = 0
    Q = []
    Q_prime = []

    M = np.asarray([
        [-1, 3, -3, 1],
        [3, -6, 3, 0],
        [-3, 3, 0, 0],
        [1, 0, 0, 0]
    ])

    # Computes the Bezier curve point for each value of u
    while u <= 1 or isclose(u, 1, abs_tol=1e-8):
        Q_u = P.T @ M @ np.asarray([pow(u, 3), pow(u, 2), u, 1]).T
        Q.append(Q_u)
        Q_p = P.T @ M @ np.asarray([3 * pow(u, 2), 2 * u, 1, 0]).T
        Q_prime.append(Q_p)
        u += du

    return Q, Q_prime


# Returns the surface of revolution given a line
def compute_surface_of_revolution(CR, num_t):
    S = []

    for point in CR:
        for t in np.linspace(0, 2*pi, num_t):
            s = np.asarray([point[0] * cos(t), point[0]*sin(t), point[2]])
            S.append(s)

    return np.round(np.asarray(S), 6)


# Computes the tangent of the surface with regards to theta
def compute_theta_tangent(S):
    tan_t = []
    for point in S:
        tan = np.asarray([-1 * point[1], point[0], 0])
        tan_t.append(tan)
    return np.round(np.asarray(tan_t), 6)


# Defines the triangles that connect the points in the patch
def get_triangles(patch, num_u, num_v):
    verts = np.reshape(np.arange(len(patch)), (num_u, num_v))
    n = (num_u - 1) * (num_v - 1) * 2
    triangles = [None for i in range(n)]

    k = 0
    for i in range(num_u - 1):
        for j in range(num_v - 1):
            triangles[k] = (verts[i][j], verts[i+1][j], verts[i][j+1])
            k += 1
            triangles[k] = (verts[i][j+1], verts[i+1][j], verts[i+1][j+1])
            k += 1

    return np.asarray(triangles)


# Generates the caps by creating triangles for indices between start and end
def generate_cap(start, end):
    cap = []
    for i in range(start+1, end-1):
        cap.append((end-1, i-1, i))
    return np.asarray(cap)


# Prints the inventor file
def print_inventor(P, patch, triangles, isSmooth, norm):
    print("#Inventor V2.0 ascii\n\n")
    print("ShapeHints {")
    print("vertexOrdering        COUNTERCLOCKWISE")
    print("}")
    print("Separator { Coordinate3 { 	point [ ")
    print_coords(patch)
    print("] }")
    if isSmooth:
        print("NormalBinding {")
        print("value        PER_VERTEX_INDEXED")
        print("}")
        print("Normal {")
        print("    vector [")
        print_coords(norm)
        print("]}")
    print("IndexedFaceSet {coordIndex [")
    print_indices(triangles)
    print("] } }")


# Prints the coordinates for the inventor file
def print_coords(Q):
    for point in Q:
        print("{:<08} {:<08} {:<08}".format(
            point[0], point[1], point[2]), end=",\n")


# Prints the coordinate indices for the inventor file
def print_indices(triangles):
    for point in triangles:
        print("{}, {}, {}, -1".format(
            point[0], point[1], point[2]), end=",\n")


def main():
    # Parses args
    filename, num_u, num_t, isSmooth, caps = parse_args()
    if not exists(filename):
        print("File not found.")
        return None

    # Parses points
    P = parse_points(filename)

    # Get Catmull-Rom Spline and its derivative
    CR, CR_prime = compute_catmull_rom(P, num_u-1)

    # Get Surface of Revolution
    S = compute_surface_of_revolution(CR, num_t)

    # Get tangent with regards to u
    du = compute_surface_of_revolution(CR_prime, num_t)

    # Get tangent with regards to theta
    dt = compute_theta_tangent(S)

    # Calculates the normal vector for shading
    norm = None
    if isSmooth:
        norm = np.round(np.cross(du, dt), 6)

    # Define triangles
    triangles = get_triangles(S, CR.shape[0], num_t)

    # Generate caps
    if caps:
        n = S.shape[0]
        capBot = generate_cap(0, num_t)
        capTop = generate_cap(n-num_t, n)
        triangles = np.concatenate((capBot, triangles))
        triangles = np.concatenate((capTop, triangles))

    # Prints in the inventor format
    print_inventor(P, S, triangles, isSmooth, norm)


if __name__ == "__main__":
    main()
